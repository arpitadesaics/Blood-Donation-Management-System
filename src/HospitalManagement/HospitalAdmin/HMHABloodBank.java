/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package HospitalManagement.HospitalAdmin;

import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import model.BloodBank;
import model.Hospital;
import model.system;

/**
 *
 * @author arpid
 */
public class HMHABloodBank extends javax.swing.JPanel {

    /**
     * Creates new form HMHABloodBank
     */
    system s;
    public HMHABloodBank(system s) {
        initComponents();
        this.s = s;
        populateTable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tablebb = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        contact = new javax.swing.JTextField();
        time = new javax.swing.JTextField();
        date = new javax.swing.JTextField();
        location = new javax.swing.JTextField();
        hospitalname = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        bp = new javax.swing.JTextField();
        bn = new javax.swing.JTextField();
        abp = new javax.swing.JTextField();
        abn = new javax.swing.JTextField();
        op = new javax.swing.JTextField();
        on = new javax.swing.JTextField();
        an = new javax.swing.JTextField();
        ap = new javax.swing.JTextField();
        create = new javax.swing.JButton();
        update = new javax.swing.JButton();
        view = new javax.swing.JButton();
        delete = new javax.swing.JButton();
        jLabel15 = new javax.swing.JLabel();

        jPanel1.setPreferredSize(new java.awt.Dimension(1200, 800));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        tablebb.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Hospital Name", "Location", "Date", "Time", "Contact", "A+", "A-", "B+", "B-", "AB+", "AB-", "O+", "O-"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Long.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane2.setViewportView(tablebb);

        jPanel1.add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(29, 74, 897, 154));

        jLabel1.setFont(new java.awt.Font("Segoe UI", 3, 14)); // NOI18N
        jLabel1.setText("Hospital Name:");
        jPanel1.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 270, -1, -1));

        jLabel2.setFont(new java.awt.Font("Segoe UI", 3, 14)); // NOI18N
        jLabel2.setText("Location:");
        jPanel1.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 310, -1, -1));

        jLabel3.setFont(new java.awt.Font("Segoe UI", 3, 14)); // NOI18N
        jLabel3.setText("Date:");
        jPanel1.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 340, -1, -1));

        jLabel4.setFont(new java.awt.Font("Segoe UI", 3, 14)); // NOI18N
        jLabel4.setText("Time:");
        jPanel1.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 380, -1, -1));

        jLabel5.setFont(new java.awt.Font("Segoe UI", 3, 14)); // NOI18N
        jLabel5.setText("Contact:");
        jPanel1.add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 420, -1, -1));
        jPanel1.add(contact, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 420, 130, -1));
        jPanel1.add(time, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 380, 130, -1));

        date.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dateActionPerformed(evt);
            }
        });
        jPanel1.add(date, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 340, 130, -1));
        jPanel1.add(location, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 300, 130, -1));
        jPanel1.add(hospitalname, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 260, 130, -1));

        jLabel6.setFont(new java.awt.Font("Segoe UI", 3, 14)); // NOI18N
        jLabel6.setText("A+");
        jPanel1.add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(370, 270, -1, -1));

        jLabel7.setFont(new java.awt.Font("Segoe UI", 3, 14)); // NOI18N
        jLabel7.setText("A-");
        jPanel1.add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(370, 300, -1, -1));

        jLabel8.setFont(new java.awt.Font("Segoe UI", 3, 14)); // NOI18N
        jLabel8.setText("B+");
        jPanel1.add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(370, 330, -1, -1));

        jLabel9.setFont(new java.awt.Font("Segoe UI", 3, 14)); // NOI18N
        jLabel9.setText("B-");
        jPanel1.add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(370, 360, -1, -1));

        jLabel10.setFont(new java.awt.Font("Segoe UI", 3, 14)); // NOI18N
        jLabel10.setText("AB+");
        jPanel1.add(jLabel10, new org.netbeans.lib.awtextra.AbsoluteConstraints(370, 390, -1, -1));

        jLabel11.setFont(new java.awt.Font("Segoe UI", 3, 14)); // NOI18N
        jLabel11.setText("AB-");
        jPanel1.add(jLabel11, new org.netbeans.lib.awtextra.AbsoluteConstraints(370, 430, -1, -1));

        jLabel12.setFont(new java.awt.Font("Segoe UI", 3, 14)); // NOI18N
        jLabel12.setText("O-");
        jPanel1.add(jLabel12, new org.netbeans.lib.awtextra.AbsoluteConstraints(370, 480, -1, -1));

        jLabel13.setFont(new java.awt.Font("Segoe UI", 3, 14)); // NOI18N
        jLabel13.setText("O+");
        jPanel1.add(jLabel13, new org.netbeans.lib.awtextra.AbsoluteConstraints(370, 460, -1, -1));
        jPanel1.add(bp, new org.netbeans.lib.awtextra.AbsoluteConstraints(410, 330, 121, -1));
        jPanel1.add(bn, new org.netbeans.lib.awtextra.AbsoluteConstraints(410, 360, 121, -1));
        jPanel1.add(abp, new org.netbeans.lib.awtextra.AbsoluteConstraints(410, 390, 121, -1));
        jPanel1.add(abn, new org.netbeans.lib.awtextra.AbsoluteConstraints(410, 420, 121, -1));
        jPanel1.add(op, new org.netbeans.lib.awtextra.AbsoluteConstraints(410, 450, 121, -1));
        jPanel1.add(on, new org.netbeans.lib.awtextra.AbsoluteConstraints(410, 480, 121, -1));
        jPanel1.add(an, new org.netbeans.lib.awtextra.AbsoluteConstraints(410, 300, 121, -1));
        jPanel1.add(ap, new org.netbeans.lib.awtextra.AbsoluteConstraints(410, 260, 121, -1));

        create.setText("CREATE");
        create.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createActionPerformed(evt);
            }
        });
        jPanel1.add(create, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 560, -1, -1));

        update.setText("UPDATE");
        update.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateActionPerformed(evt);
            }
        });
        jPanel1.add(update, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 560, -1, -1));

        view.setText("VIEW");
        view.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewActionPerformed(evt);
            }
        });
        jPanel1.add(view, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 560, -1, -1));

        delete.setText("DELETE");
        delete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteActionPerformed(evt);
            }
        });
        jPanel1.add(delete, new org.netbeans.lib.awtextra.AbsoluteConstraints(430, 560, -1, -1));

        jLabel15.setIcon(new javax.swing.ImageIcon(getClass().getResource("/HospitalManagement/HospitalAdmin/hosppage.jpeg"))); // NOI18N
        jLabel15.setPreferredSize(new java.awt.Dimension(1200, 800));
        jPanel1.add(jLabel15, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 960, 1030));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 960, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void dateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dateActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_dateActionPerformed

    private void createActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createActionPerformed
        // TODO add your handling code here:
         int flag =1;
        String s1 = hospitalname.getText(); 
        if(s1.equals(""))        {
           flag=0;
           JOptionPane.showMessageDialog(this,"Name field cannot be empty or contain numbers");
           return;                     
        }   
        char[] chars = s1.toCharArray();
        for(char c : chars)
        {
            if(Character.isDigit(c))
            {
               flag=0;
               JOptionPane.showMessageDialog(this,"Name field cannot be empty or contain numbers");
               return;   
            }
        }
         String s2 = location.getText();
       
       if(s2.equals("")){
           flag=0;
           JOptionPane.showMessageDialog(this,"Location cannot be empty");
            return;
        } 
        
        String s3 = date.getText();
       
       if(s3.equals(""))
        {
           flag=0;
           JOptionPane.showMessageDialog(this,"Please enter date");
           return;                     
        }
         if (s3.length()<10){
             flag=0;
            JOptionPane.showMessageDialog(this,"Please enter correct date in format mm/dd/yyyy" );
            return;
        }
        
        StringBuffer sBuffer = new StringBuffer(s3);
        String mm;
        String dd;
        String yr;

        mm = sBuffer.substring(0,2);
        dd = sBuffer.substring(3,5);
        yr = sBuffer.substring(6,10);

        
        if(mm.matches("0[1-9]|1[0-2]") && dd.matches("0[1-9]|[12][0-9]|3[01]") && yr.matches("(19|20)\\d\\d"))
        {
          
        }
        else
        {
            flag=0;
         JOptionPane.showMessageDialog(this, "Please enter correct date in format mm/dd/yyyy");
         return;
        }
       String s4 = time.getText();
       
       String regex = "([01]?[0-9]|2[0-3]):[0-5][0-9]";        
        Pattern p = Pattern.compile(regex); 
        if (s4 == "") {
            flag = 0;
            JOptionPane.showMessageDialog(this, "Please enter time");        }
 
        Matcher m = p.matcher(s4); 
        if (m.matches()){
            
        }
        else{
            flag = 0;
             JOptionPane.showMessageDialog(this, "Please enter time in 24 hr format");
        }
       String ss5 =  contact.getText();
        
        if(ss5.equals(""))
        {
            flag=0;
           JOptionPane.showMessageDialog(this,"Contact number field cannot be empty or contain alphabet"); 
           return;
         }
        if(ss5.length()!=10)
        {
            flag=0;
            JOptionPane.showMessageDialog(this,"Contact number must be 10 digits");  
            return;
        }
        char[] chars5 = ss5.toCharArray();
        for(char c : chars5)
        {
            if(Character.isAlphabetic(c))
            {
               flag=0;
               JOptionPane.showMessageDialog(this,"Cell phone number field cannot be empty or contain alphabet"); 
               return;   
            }
        }
         long s5 = Long.parseLong(ss5);
         for (BloodBank epp:s.getBloodbankdirectory().getBloodbank()){
            if (s5 == (epp.getContact())){
               flag=0;                
             JOptionPane.showMessageDialog(this,"Phone Number already exists, please fill the details again");
            }
        } 
        String s6 = ap.getText();
       
       if(s6.equals("")){
           flag=0;
           JOptionPane.showMessageDialog(this,"Blood Group cannot be empty");
            return;
        } 
       
       String s7 = an.getText();
       
       if(s7.equals("")){
           flag=0;
           JOptionPane.showMessageDialog(this,"Blood Group cannot be empty");
            return;
        } 
       
        String s8 = bp.getText();
       
       if(s8.equals("")){
           flag=0;
           JOptionPane.showMessageDialog(this,"Blood Group cannot be empty");
            return;
        } 
        String s9 = bn.getText();
       
       if(s9.equals("")){
           flag=0;
           JOptionPane.showMessageDialog(this,"Blood Group cannot be empty");
            return;
        } 
        String s10 = abp.getText();
       
       if(s10.equals("")){
           flag=0;
           JOptionPane.showMessageDialog(this,"Blood Group cannot be empty");
            return;
        } 
        String s11 = abn.getText();
       
       if(s11.equals("")){
           flag=0;
           JOptionPane.showMessageDialog(this,"Blood Group cannot be empty");
            return;
        } 
        String s12 = op.getText();
       
       if(s12.equals("")){
           flag=0;
           JOptionPane.showMessageDialog(this,"Blood Group cannot be empty");
            return;
        } 
        String s13 = on.getText();
       
       if(s13.equals("")){
           flag=0;
           JOptionPane.showMessageDialog(this,"Blood Group cannot be empty");
            return;
        } 
       
       if(flag == 1)
        {
        BloodBank hh = s.getBloodbankdirectory().addNewBloodBank();
        hh.setHospitalname(s1);
        hh.setLocation(s2);
        hh.setDate(s3);
        hh.setTime(s4);
        hh.setContact(s5);
        hh.setAp(s6);
        hh.setAn(s7);
        hh.setBp(s8);
        hh.setBn(s9);
        hh.setAbp(s10);
        hh.setAbn(s11);
        hh.setOp(s12);
        hh.setOn(s13);
        
        
         
        JOptionPane.showMessageDialog(this,"Blood Bank created successfully");        
        populateTable();   
        
        }
        hospitalname.setText("");
        date.setText("");
        contact.setText("");
        location.setText("");
        time.setText("");
        an.setText("");
        ap.setText("");
        bp.setText("");
        bn.setText("");
        abp.setText("");
        abn.setText("");
        op.setText("");
        on.setText("");
       
    }//GEN-LAST:event_createActionPerformed

    private void viewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewActionPerformed
        // TODO add your handling code here:
         int row = tablebb.getSelectedRow();
        DefaultTableModel model = (DefaultTableModel) tablebb.getModel();
        BloodBank selectedep = (BloodBank)model.getValueAt(row, 0);
        
                hospitalname.setText(String.valueOf(selectedep.getHospitalname()));
                location.setText(String.valueOf(selectedep.getLocation()));
                date.setText(String.valueOf(selectedep.getDate()));
                time.setText(String.valueOf(selectedep.getTime()));
                contact.setText(String.valueOf(selectedep.getContact()));
                ap.setText(String.valueOf(selectedep.getAp()));
                an.setText(String.valueOf(selectedep.getAn()));
                bp.setText(String.valueOf(selectedep.getBp()));
                bn.setText(String.valueOf(selectedep.getBn()));
                abp.setText(String.valueOf(selectedep.getAbp()));
                abn.setText(String.valueOf(selectedep.getAbn()));
                op.setText(String.valueOf(selectedep.getOp()));
                on.setText(String.valueOf(selectedep.getOn()));
    }//GEN-LAST:event_viewActionPerformed

    private void deleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteActionPerformed
        // TODO add your handling code here:
         int row = tablebb.getSelectedRow();
        if(row<0){
            JOptionPane.showMessageDialog(this,"Please select row to delete");
            return;

        }

        DefaultTableModel model = (DefaultTableModel) tablebb.getModel();
        BloodBank selectedep = (BloodBank)model.getValueAt(row, 0);

        s.getBloodbankdirectory().deleteBloodBank(selectedep);
        JOptionPane.showMessageDialog(this,"Blood Bank Profile deleted");

        populateTable();
    }//GEN-LAST:event_deleteActionPerformed

    private void updateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateActionPerformed
        // TODO add your handling code here:
        int row = tablebb.getSelectedRow();
        DefaultTableModel model = (DefaultTableModel) tablebb.getModel();
        BloodBank selectedep = (BloodBank)model.getValueAt(row, 0);
        s.getBloodbankdirectory().deleteBloodBank(selectedep);
        
         int flag =1;
        String s1 = hospitalname.getText(); 
        if(s1.equals(""))        {
           flag=0;
           JOptionPane.showMessageDialog(this,"Name field cannot be empty or contain numbers");
           return;                     
        }   
        char[] chars = s1.toCharArray();
        for(char c : chars)
        {
            if(Character.isDigit(c))
            {
               flag=0;
               JOptionPane.showMessageDialog(this,"Name field cannot be empty or contain numbers");
               return;   
            }
        }
         String s2 = location.getText();
       
       if(s2.equals("")){
           flag=0;
           JOptionPane.showMessageDialog(this,"Location cannot be empty");
            return;
        } 
        
        String s3 = date.getText();
       
        if(s3.equals(""))
        {
           flag=0;
           JOptionPane.showMessageDialog(this,"Please enter date");
           return;                     
        }
         if (s3.length()<10){
             flag=0;
            JOptionPane.showMessageDialog(this,"Please enter correct date in format mm/dd/yyyy" );
            return;
        }
        
        StringBuffer sBuffer = new StringBuffer(s3);
        String mm;
        String dd;
        String yr;

        mm = sBuffer.substring(0,2);
        dd = sBuffer.substring(3,5);
        yr = sBuffer.substring(6,10);

        
        if(mm.matches("0[1-9]|1[0-2]") && dd.matches("0[1-9]|[12][0-9]|3[01]") && yr.matches("(19|20)\\d\\d"))
        {
          
        }
        else
        {
            flag=0;
         JOptionPane.showMessageDialog(this, "Please enter correct date in format mm/dd/yyyy");
         return;
        }
       String s4 = time.getText();
       
      String regex = "([01]?[0-9]|2[0-3]):[0-5][0-9]";        
        Pattern p = Pattern.compile(regex); 
        if (s4 == "") {
            flag = 0;
            JOptionPane.showMessageDialog(this, "Please enter time");        }
 
        Matcher m = p.matcher(s4); 
        if (m.matches()){
            
        }
        else{
            flag =0;
             JOptionPane.showMessageDialog(this, "Please enter time in 24 hr format");
        }
       String ss5 =  contact.getText();
        
        if(ss5.equals(""))
        {
            flag=0;
           JOptionPane.showMessageDialog(this,"Contact number field cannot be empty or contain alphabet"); 
           return;
         }
        if(ss5.length()!=10)
        {
            flag=0;
            JOptionPane.showMessageDialog(this,"Contact number must be 10 digits");  
            return;
        }
        char[] chars5 = ss5.toCharArray();
        for(char c : chars5)
        {
            if(Character.isAlphabetic(c))
            {
               flag=0;
               JOptionPane.showMessageDialog(this,"Cell phone number field cannot be empty or contain alphabet"); 
               return;   
            }
        }
         long s5 = Long.parseLong(ss5);
         for (BloodBank epp:s.getBloodbankdirectory().getBloodbank()){
            if (s5 == (epp.getContact())){
               flag=0;                
             JOptionPane.showMessageDialog(this,"Phone Number already exists, please fill the details again");
            }
        } 
        String s6 = ap.getText();
       
       if(s6.equals("")){
           flag=0;
           JOptionPane.showMessageDialog(this,"Blood Group cannot be empty");
            return;
        } 
       
       String s7 = an.getText();
       
       if(s7.equals("")){
           flag=0;
           JOptionPane.showMessageDialog(this,"Blood Group cannot be empty");
            return;
        } 
       
        String s8 = bp.getText();
       
       if(s8.equals("")){
           flag=0;
           JOptionPane.showMessageDialog(this,"Blood Group cannot be empty");
            return;
        } 
        String s9 = bn.getText();
       
       if(s9.equals("")){
           flag=0;
           JOptionPane.showMessageDialog(this,"Blood Group cannot be empty");
            return;
        } 
        String s10 = abp.getText();
       
       if(s10.equals("")){
           flag=0;
           JOptionPane.showMessageDialog(this,"Blood Group cannot be empty");
            return;
        } 
        String s11 = abn.getText();
       
       if(s11.equals("")){
           flag=0;
           JOptionPane.showMessageDialog(this,"Blood Group cannot be empty");
            return;
        } 
        String s12 = op.getText();
       
       if(s12.equals("")){
           flag=0;
           JOptionPane.showMessageDialog(this,"Blood Group cannot be empty");
            return;
        } 
        String s13 = on.getText();
       
       if(s13.equals("")){
           flag=0;
           JOptionPane.showMessageDialog(this,"Blood Group cannot be empty");
            return;
        } 
       
       if(flag == 1)
        {
        BloodBank hh = s.getBloodbankdirectory().addNewBloodBank();
        hh.setHospitalname(s1);
        hh.setLocation(s2);
        hh.setDate(s3);
        hh.setTime(s4);
        hh.setContact(s5);
        hh.setAp(s6);
        hh.setAn(s7);
        hh.setBp(s8);
        hh.setBn(s9);
        hh.setAbp(s10);
        hh.setAbn(s11);
        hh.setOp(s12);
        hh.setOn(s13);
        
        
         
        JOptionPane.showMessageDialog(this,"Blood Bank Updated successfully");
        
        populateTable();    
        }
        hospitalname.setText("");
        date.setText("");
        contact.setText("");
        location.setText("");
        time.setText("");
        an.setText("");
        ap.setText("");
        bp.setText("");
        bn.setText("");
        abp.setText("");
        abn.setText("");
        op.setText("");
        on.setText("");
        
    }//GEN-LAST:event_updateActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField abn;
    private javax.swing.JTextField abp;
    private javax.swing.JTextField an;
    private javax.swing.JTextField ap;
    private javax.swing.JTextField bn;
    private javax.swing.JTextField bp;
    private javax.swing.JTextField contact;
    private javax.swing.JButton create;
    private javax.swing.JTextField date;
    private javax.swing.JButton delete;
    private javax.swing.JTextField hospitalname;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextField location;
    private javax.swing.JTextField on;
    private javax.swing.JTextField op;
    private javax.swing.JTable tablebb;
    private javax.swing.JTextField time;
    private javax.swing.JButton update;
    private javax.swing.JButton view;
    // End of variables declaration//GEN-END:variables

private void populateTable() {
          DefaultTableModel model = (DefaultTableModel) tablebb.getModel();
          model.setRowCount(0);
        
        for (BloodBank ep:s.getBloodbankdirectory().getBloodbank()){
            
            Object[] row = new Object[13];
            row[0] = ep;
            row[1] = ep.getLocation();
            row[2] = ep.getDate();
            row[3] = ep.getTime();
            row[4] = ep.getContact();
            row[5] = ep.getAp();
            row[6] = ep.getAn();
            row[7] = ep.getBp();
            row[8] = ep.getBn();
            row[9] = ep.getAbp();
            row[10] = ep.getAbn();
            row[11] = ep.getOp();
            row[12] = ep.getOn();            
            
            
            
            
            model.addRow(row);
}     
 
}

}
