/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package BloodDonationManagement.Receiver;

import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import model.BloodBank;
import model.BloodDonationEvent;
import model.ReceiverSlot;
import model.system;

/**
 *
 * @author arpid
 */
public class BDReceiverSlotPanel extends javax.swing.JPanel {

    /**
     * Creates new form BDReceiverSlotPanel
     */
    system s;
    public BDReceiverSlotPanel(system s) {
        initComponents();
        this.s = s;
        populateTable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jLabel2 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        receiverid = new javax.swing.JTextField();
        name = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        age = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        gender = new javax.swing.JComboBox<>();
        jLabel4 = new javax.swing.JLabel();
        contact = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        emailid = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        bloodgroup = new javax.swing.JTextField();
        date = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        centre = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        location = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        time = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        slotid = new javax.swing.JTextField();
        jLabel13 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jLabel14 = new javax.swing.JLabel();
        username = new javax.swing.JTextField();
        jLabel15 = new javax.swing.JLabel();
        receivercontact = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        tablebb = new javax.swing.JTable();
        jLabel16 = new javax.swing.JLabel();

        setPreferredSize(new java.awt.Dimension(1200, 800));

        jPanel1.setPreferredSize(new java.awt.Dimension(1200, 800));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("Segoe UI", 3, 18)); // NOI18N
        jLabel1.setText("Search");
        jPanel1.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 30, -1, 26));

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        jPanel1.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(225, 21, -1, 48));

        jLabel2.setFont(new java.awt.Font("Segoe UI", 3, 14)); // NOI18N
        jLabel2.setText("Name:");
        jPanel1.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(241, 274, -1, -1));

        jLabel5.setFont(new java.awt.Font("Segoe UI", 3, 14)); // NOI18N
        jLabel5.setText("Receiver ID:");
        jPanel1.add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(213, 308, -1, -1));
        jPanel1.add(receiverid, new org.netbeans.lib.awtextra.AbsoluteConstraints(299, 305, 140, -1));
        jPanel1.add(name, new org.netbeans.lib.awtextra.AbsoluteConstraints(299, 271, 140, -1));

        jLabel3.setFont(new java.awt.Font("Segoe UI", 3, 14)); // NOI18N
        jLabel3.setText("Age");
        jPanel1.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(253, 342, -1, -1));
        jPanel1.add(age, new org.netbeans.lib.awtextra.AbsoluteConstraints(299, 339, 140, -1));

        jLabel7.setFont(new java.awt.Font("Segoe UI", 3, 14)); // NOI18N
        jLabel7.setText("Gender:");
        jPanel1.add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 370, -1, -1));

        gender.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select", "Female", "Male", "Other" }));
        gender.setPreferredSize(new java.awt.Dimension(64, 22));
        jPanel1.add(gender, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 370, 140, 20));

        jLabel4.setFont(new java.awt.Font("Segoe UI", 3, 14)); // NOI18N
        jLabel4.setText("Contact:");
        jPanel1.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 400, -1, -1));
        jPanel1.add(contact, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 400, 140, -1));

        jLabel6.setFont(new java.awt.Font("Segoe UI", 3, 14)); // NOI18N
        jLabel6.setText("Email ID:");
        jPanel1.add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 430, -1, -1));
        jPanel1.add(emailid, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 430, 140, -1));

        jLabel8.setFont(new java.awt.Font("Segoe UI", 3, 14)); // NOI18N
        jLabel8.setText("Blood Group:");
        jPanel1.add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 460, -1, -1));
        jPanel1.add(bloodgroup, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 460, 140, -1));
        jPanel1.add(date, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 580, 140, -1));

        jLabel9.setFont(new java.awt.Font("Segoe UI", 3, 14)); // NOI18N
        jLabel9.setText("Hospital Name:");
        jPanel1.add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 490, -1, -1));
        jPanel1.add(centre, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 490, 140, -1));

        jLabel10.setFont(new java.awt.Font("Segoe UI", 3, 14)); // NOI18N
        jLabel10.setText("Location:");
        jPanel1.add(jLabel10, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 520, -1, -1));
        jPanel1.add(location, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 520, 140, -1));

        jLabel11.setFont(new java.awt.Font("Segoe UI", 3, 14)); // NOI18N
        jLabel11.setText("Date:");
        jPanel1.add(jLabel11, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 580, -1, -1));
        jPanel1.add(time, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 550, 140, -1));

        jLabel12.setFont(new java.awt.Font("Segoe UI", 3, 14)); // NOI18N
        jLabel12.setText("Time");
        jPanel1.add(jLabel12, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 550, -1, -1));
        jPanel1.add(slotid, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 610, 140, -1));

        jLabel13.setFont(new java.awt.Font("Segoe UI", 3, 14)); // NOI18N
        jLabel13.setText("Slot ID");
        jPanel1.add(jLabel13, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 610, -1, -1));

        jButton1.setText("BOOK");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(530, 440, 152, -1));

        jButton3.setText("VIEW SLOT");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton3, new org.netbeans.lib.awtextra.AbsoluteConstraints(530, 490, 152, -1));

        jLabel14.setFont(new java.awt.Font("Segoe UI", 3, 14)); // NOI18N
        jLabel14.setText("Username:");
        jPanel1.add(jLabel14, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 640, -1, -1));
        jPanel1.add(username, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 640, 140, -1));

        jLabel15.setFont(new java.awt.Font("Segoe UI", 3, 14)); // NOI18N
        jLabel15.setText("Receiver Contact:");
        jPanel1.add(jLabel15, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 670, -1, -1));
        jPanel1.add(receivercontact, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 670, 140, -1));

        tablebb.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Hospital Name", "Location", "Date", "Time", "Contact", "A+", "A-", "B+", "B-", "AB+", "AB-", "O+", "O-"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Long.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane2.setViewportView(tablebb);

        jPanel1.add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(29, 86, 700, 167));

        jLabel16.setIcon(new javax.swing.ImageIcon(getClass().getResource("/BloodDonationManagement/a7.jpg"))); // NOI18N
        jLabel16.setPreferredSize(new java.awt.Dimension(1200, 800));
        jPanel1.add(jLabel16, new org.netbeans.lib.awtextra.AbsoluteConstraints(-10, 0, 1200, 800));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(17, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        int flag =1;
        String s1 = name.getText();
        if(s1.equals(""))        {
            flag=0;
            JOptionPane.showMessageDialog(this,"Name field cannot be empty or contain numbers");
            return;
        }
        char[] chars = s1.toCharArray();
        for(char c : chars)
        {
            if(Character.isDigit(c))
            {
                flag=0;
                JOptionPane.showMessageDialog(this,"Name field cannot be empty or contain numbers");
                return;
            }
        }
        String ss2 = receiverid.getText();

        if(ss2.equals(""))
        {
            flag=0;
            JOptionPane.showMessageDialog(this,"Id field cannot be empty or contain alphabet");
            return;
        }
        char[] chars3 = ss2.toCharArray();
        for(char c : chars3)
        {
            if(Character.isAlphabetic(c))
            {
                flag=0;
                JOptionPane.showMessageDialog(this,"Id field cannot be empty or contain alphabet");
                return;
            }
        }
        int s2 = Integer.parseInt(ss2);

        String ss3 = age.getText();

        if(ss3.equals(""))
        {
            flag=0;
            JOptionPane.showMessageDialog(this,"Age field cannot be empty or contain alphabet");
            return;
        }
        char[] chars1 = ss3.toCharArray();
        for(char c : chars1)
        {
            if(Character.isAlphabetic(c))
            {
                flag=0;
                JOptionPane.showMessageDialog(this,"Age field cannot be empty or contain alphabet");
                return;
            }
        }
        int s3 = Integer.parseInt(ss3);

        String s4 = (String)gender.getSelectedItem();
        if(s4.equals("select"))
        {
            flag=0;
            JOptionPane.showMessageDialog(this,"Gender field cannot be empty");
            return;
        }

        String ss5 =  contact.getText();

        if(ss5.equals(""))
        {
            flag=0;
            JOptionPane.showMessageDialog(this,"Cell phone number field cannot be empty or contain alphabet");
            return;
        }
        if(ss5.length()!=10)
        {
            flag=0;
            JOptionPane.showMessageDialog(this,"Cell phone number must be 10 digits");
            return;
        }
        char[] chars5 = ss5.toCharArray();
        for(char c : chars5)
        {
            if(Character.isAlphabetic(c))
            {
                flag=0;
                JOptionPane.showMessageDialog(this,"Cell phone number field cannot be empty or contain alphabet");
                return;
            }
        }
        long s5 = Long.parseLong(ss5);
        String s6 = emailid.getText();
        if(s6.equals(""))
        {
            flag=0;
            JOptionPane.showMessageDialog(this,"EmailId field cannot be empty");
            return;
        }

        String s7 = bloodgroup.getText();
        if(s7.equals(""))
        {
            flag=0;
            JOptionPane.showMessageDialog(this,"BloodGroup field cannot be empty");
            return;
        }

        String s8 = centre.getText();
        if(s1.equals(""))        {
            flag=0;
            JOptionPane.showMessageDialog(this,"Centre field cannot be empty or contain numbers");
            return;
        }
        char[] chars8 = s8.toCharArray();
        for(char c : chars8)
        {
            if(Character.isDigit(c))
            {
                flag=0;
                JOptionPane.showMessageDialog(this,"Centre field cannot be empty or contain numbers");
                return;
            }
        }

        String s9 = location.getText();

        if(s9.equals("")){
            flag=0;
            JOptionPane.showMessageDialog(this,"Location cannot be empty");
            return;
        }

        String s10 = date.getText();

        if(s10.equals(""))
        {
           flag=0;
           JOptionPane.showMessageDialog(this,"Please enter date");
           return;                     
        }
         if (s10.length()<10){
             flag=0;
            JOptionPane.showMessageDialog(this,"Please enter correct date in format mm/dd/yyyy" );
            return;
        }
        
        StringBuffer sBuffer = new StringBuffer(s10);
        String mm;
        String dd;
        String yr;

        mm = sBuffer.substring(0,2);
        dd = sBuffer.substring(3,5);
        yr = sBuffer.substring(6,10);

        
        if(mm.matches("0[1-9]|1[0-2]") && dd.matches("0[1-9]|[12][0-9]|3[01]") && yr.matches("(19|20)\\d\\d"))
        {
          
        }
        else
        {
            flag=0;
         JOptionPane.showMessageDialog(this, "Please enter correct date in format mm/dd/yyyy");
         return;
        }

        String s11 = time.getText();

        String regex = "([01]?[0-9]|2[0-3]):[0-5][0-9]";
        
        Pattern p = Pattern.compile(regex);
 
        if (s11 == "") {
            flag = 0;
            JOptionPane.showMessageDialog(this, "Please enter time");
        }
 
        Matcher m = p.matcher(s11);
 
        if (m.matches()){
            
        }
        else{
            flag = 0;
             JOptionPane.showMessageDialog(this, "Please enter time in 24 hr format");
        }
        
        String ss12 = slotid.getText();

        if(ss12.equals(""))
        {
            flag=0;
            JOptionPane.showMessageDialog(this,"Id field cannot be empty or contain alphabet");
            return;
        }
        char[] chars12 = ss12.toCharArray();
        for(char c : chars12)
        {
            if(Character.isAlphabetic(c))
            {
                flag=0;
                JOptionPane.showMessageDialog(this,"Id field cannot be empty or contain alphabet");
                return;
            }
        }
        int s12 = Integer.parseInt(ss12);
        for (ReceiverSlot epp:s.getReceiverslotdirectory().getReceiverSlot()){
            if (s12 == (epp.getSlotid())){
                flag=0;
                JOptionPane.showMessageDialog(this,"ID already exists, please fill the details again");
            }
        }

        String ss13 =  receivercontact.getText();

        if(ss13.equals(""))
        {
            flag=0;
            JOptionPane.showMessageDialog(this,"Cell phone number field cannot be empty or contain alphabet");
            return;
        }
        if(ss13.length()!=10)
        {
            flag=0;
            JOptionPane.showMessageDialog(this,"Cell phone number must be 10 digits");
            return;
        }
        char[] chars13 = ss13.toCharArray();
        for(char c : chars5)
        {
            if(Character.isAlphabetic(c))
            {
                flag=0;
                JOptionPane.showMessageDialog(this,"Cell phone number field cannot be empty or contain alphabet");
                return;
            }
        }
        long s13 = Long.parseLong(ss13);

        if(flag == 1)
        {
            ReceiverSlot hh = s.getReceiverslotdirectory().addNewRSlot();
            hh.setName(s1);
            hh.setDonorid(s2);
            hh.setAge(s3);
            hh.setGender(s4);
            hh.setContact(s5);
            hh.setEmailId(s6);
            hh.setBloodGroup(s7);
            hh.setCentre(s8);
            hh.setLocation(s9);
            hh.setTime(s10);
            hh.setDate(s11);
            hh.setSlotid(s12);
            hh.setReceiverContact(s13);

            JOptionPane.showMessageDialog(this,"Slot booked successfully");

            populateTable();
        }

        slotid.setText("");
        contact.setText("");
        location.setText("");
        date.setText("");
        time.setText("");
        centre.setText("");

    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        int row = tablebb.getSelectedRow();
        DefaultTableModel model = (DefaultTableModel) tablebb.getModel();
        BloodBank selectedep = (BloodBank)model.getValueAt(row, 0);

        centre.setText(String.valueOf(selectedep.getHospitalname()));
        location.setText(String.valueOf(selectedep.getLocation()));
//        date.setText(String.valueOf(selectedep.getDate()));
//        time.setText(String.valueOf(selectedep.getTime()));
        contact.setText(String.valueOf(selectedep.getContact()));
    }//GEN-LAST:event_jButton3ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    public static javax.swing.JTextField age;
    public static javax.swing.JTextField bloodgroup;
    public static javax.swing.JTextField centre;
    public static javax.swing.JTextField contact;
    public static javax.swing.JTextField date;
    public static javax.swing.JTextField emailid;
    public static javax.swing.JComboBox<String> gender;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea jTextArea1;
    public static javax.swing.JTextField location;
    public static javax.swing.JTextField name;
    public static javax.swing.JTextField receivercontact;
    public static javax.swing.JTextField receiverid;
    private javax.swing.JTextField slotid;
    private javax.swing.JTable tablebb;
    public static javax.swing.JTextField time;
    public static javax.swing.JTextField username;
    // End of variables declaration//GEN-END:variables
private void populateTable() {
          DefaultTableModel model = (DefaultTableModel) tablebb.getModel();
          model.setRowCount(0);
        
        for (BloodBank ep:s.getBloodbankdirectory().getBloodbank()){
            
            Object[] row = new Object[13];
            row[0] = ep;
            row[1] = ep.getLocation();
            row[2] = ep.getDate();
            row[3] = ep.getTime();
            row[4] = ep.getContact();
            row[5] = ep.getAp();
            row[6] = ep.getAn();
            row[7] = ep.getBp();
            row[8] = ep.getBn();
            row[9] = ep.getAbp();
            row[10] = ep.getAbn();
            row[11] = ep.getOp();
            row[12] = ep.getOn();            
            
            
            
            
            model.addRow(row);
}     
 
}

}
