/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package BloodDonationManagement.BDAdmin;

import Main.MainLogin;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import model.Donor;
import model.Receiver;
import model.system;

/**
 *
 * @author arpid
 */
public class BDDonorUserPanel extends javax.swing.JPanel {

    /**
     * Creates new form BDUserPanel
     */
    system s;
    public BDDonorUserPanel(system s) {
        initComponents();
        this.s = s;
        populateTable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tabledonor = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jLabel8 = new javax.swing.JLabel();
        usertype = new javax.swing.JComboBox<>();
        jLabel1 = new javax.swing.JLabel();
        name = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        age = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        gender = new javax.swing.JComboBox<>();
        jLabel5 = new javax.swing.JLabel();
        id = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        contact = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        emailid = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        bloodgroup = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        username = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        password = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();

        jPanel1.setPreferredSize(new java.awt.Dimension(1200, 800));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        tabledonor.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Name", "Blood Group", "Age", "Contact", "Email ID"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Long.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tabledonor);

        jPanel1.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 50, -1, 154));

        jButton1.setText("Create");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(392, 268, -1, -1));

        jButton2.setText("Update");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton2, new org.netbeans.lib.awtextra.AbsoluteConstraints(392, 303, -1, -1));

        jButton3.setText("View");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton3, new org.netbeans.lib.awtextra.AbsoluteConstraints(392, 338, -1, -1));

        jButton4.setText("Delete");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton4, new org.netbeans.lib.awtextra.AbsoluteConstraints(392, 373, -1, -1));

        jLabel8.setFont(new java.awt.Font("Segoe UI", 3, 14)); // NOI18N
        jLabel8.setText("User Type:");
        jPanel1.add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(138, 234, -1, -1));

        usertype.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select", "Donor" }));
        jPanel1.add(usertype, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 231, 152, -1));

        jLabel1.setFont(new java.awt.Font("Segoe UI", 3, 14)); // NOI18N
        jLabel1.setText("Name:");
        jPanel1.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(158, 262, -1, -1));
        jPanel1.add(name, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 259, 152, -1));

        jLabel2.setFont(new java.awt.Font("Segoe UI", 3, 14)); // NOI18N
        jLabel2.setText("Age");
        jPanel1.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 290, -1, -1));

        age.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ageActionPerformed(evt);
            }
        });
        age.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                ageKeyPressed(evt);
            }
        });
        jPanel1.add(age, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 287, 152, -1));

        jLabel7.setFont(new java.awt.Font("Segoe UI", 3, 14)); // NOI18N
        jLabel7.setText("Gender:");
        jPanel1.add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(151, 324, -1, -1));

        gender.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select", "Female", "Male", "Other" }));
        jPanel1.add(gender, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 321, 152, -1));

        jLabel5.setFont(new java.awt.Font("Segoe UI", 3, 14)); // NOI18N
        jLabel5.setText("ID");
        jPanel1.add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 358, -1, -1));
        jPanel1.add(id, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 355, 152, -1));

        jLabel3.setFont(new java.awt.Font("Segoe UI", 3, 14)); // NOI18N
        jLabel3.setText("Contact:");
        jPanel1.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(149, 392, -1, -1));
        jPanel1.add(contact, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 389, 152, -1));

        jLabel4.setFont(new java.awt.Font("Segoe UI", 3, 14)); // NOI18N
        jLabel4.setText("Email ID:");
        jPanel1.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(145, 426, -1, -1));
        jPanel1.add(emailid, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 423, 152, -1));

        jLabel9.setFont(new java.awt.Font("Segoe UI", 3, 14)); // NOI18N
        jLabel9.setText("Blood Group:");
        jPanel1.add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(122, 460, -1, -1));
        jPanel1.add(bloodgroup, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 457, 152, -1));

        jLabel11.setFont(new java.awt.Font("Segoe UI", 3, 14)); // NOI18N
        jLabel11.setText("Username:");
        jPanel1.add(jLabel11, new org.netbeans.lib.awtextra.AbsoluteConstraints(137, 494, -1, -1));
        jPanel1.add(username, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 491, 152, -1));

        jLabel10.setFont(new java.awt.Font("Segoe UI", 3, 14)); // NOI18N
        jLabel10.setText("Password:");
        jPanel1.add(jLabel10, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 526, -1, -1));
        jPanel1.add(password, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 523, 152, -1));

        jLabel6.setFont(new java.awt.Font("Segoe UI", 3, 14)); // NOI18N
        jLabel6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/BloodDonationManagement/a7.jpg"))); // NOI18N
        jPanel1.add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 832, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        int flag =1;
        String s1 = (String)usertype.getSelectedItem();
        if(s1.equals("select"))
        {
           flag=0;
           JOptionPane.showMessageDialog(this,"UserType field cannot be empty");
           return;                     
        } 
        String s2 = name.getText(); 
        if(s2.equals(""))
        {
           flag=0;
           JOptionPane.showMessageDialog(this,"Name field cannot be empty or contain numbers");
           return;                     
        }   
        char[] chars = s2.toCharArray();
        for(char c : chars)
        {
            if(Character.isDigit(c))
            {
               flag=0;
               JOptionPane.showMessageDialog(this,"Name field cannot be empty or contain numbers");
               return;   
            }
        }
        
        
        String ss3 = age.getText();             
        
        if(ss3.equals(""))
        {
            flag=0;
           JOptionPane.showMessageDialog(this,"Age field cannot be empty or contain alphabet"); 
           return;
        }
        
        char[] chars1 = ss3.toCharArray();
        for(char c : chars1)
        {
            if(Character.isAlphabetic(c))
            {
               flag=0;
               JOptionPane.showMessageDialog(this,"Age field cannot be empty or contain alphabet"); 
               return;   
            }
        }
        int s3 = Integer.parseInt(ss3);        
        if((s3<18) || (s3>60)){
                   flag = 0;
                   JOptionPane.showMessageDialog(this,"Age must be between 18 to 60"); 
         
        }
          
        String s4 = (String)gender.getSelectedItem();
        if(s4.equals("select"))
        {
            flag=0;
           JOptionPane.showMessageDialog(this,"Gender field cannot be empty");  
           return;
        }
        String ss5 = id.getText();
        
        if(ss5.equals(""))
            {
            flag=0;
           JOptionPane.showMessageDialog(this,"Id field cannot be empty or contain alphabet"); 
           return;
            }
        char[] chars3 = ss5.toCharArray();
        for(char c : chars3)
        {
            if(Character.isAlphabetic(c))
            {
               flag=0;
               JOptionPane.showMessageDialog(this,"Id field cannot be empty or contain alphabet"); 
               return;   
            }
        }
        int s5 = Integer.parseInt(ss5);
        if(s1.equals("Donor")){
            for (Donor epp:s.getDonordirectory().getDonor()){
                if (s5 == (epp.getId())){
                   flag=0;                
                 JOptionPane.showMessageDialog(this,"ID already exists, please fill the details again");
                }
            }
        }
        else if (s1.equals("Receiver")){
                for (Receiver epp:s.getReceiverdirectory().getReceiver()){
                if (s5 == (epp.getId())){
                   flag=0;                
                 JOptionPane.showMessageDialog(this,"ID already exists, please fill the details again");
                }
                
                }
        }
        String ss6 =  contact.getText();
        
        if(ss6.equals(""))
        {
            flag=0;
           JOptionPane.showMessageDialog(this,"Cell phone number field cannot be empty or contain alphabet"); 
           return;
         }
        if(ss6.length()!=10)
        {
            flag=0;
            JOptionPane.showMessageDialog(this,"Cell phone number must be 10 digits");  
            return;
        }
        char[] chars5 = ss6.toCharArray();
        for(char c : chars5)
        {
            if(Character.isAlphabetic(c))
            {
               flag=0;
               JOptionPane.showMessageDialog(this,"Cell phone number field cannot be empty or contain alphabet"); 
               return;   
            }
        }
        long s6 = Long.parseLong(ss6);
        String s7 = emailid.getText();
        if(s7.equals(""))
        {
           flag=0;
           JOptionPane.showMessageDialog(this,"EmailId field cannot be empty");
           return;                     
        } 
        String s8 = bloodgroup.getText();
        if(s8.equals(""))
        {
           flag=0;
           JOptionPane.showMessageDialog(this,"BloodGroup field cannot be empty");
           return;                     
        } 
        
        String s9 = username.getText();
        if(s9.equals(""))
        {
           flag=0;
           JOptionPane.showMessageDialog(this,"Username field cannot be empty");
           return;                     
        } 
        if (s1.equals("Donor")){            
        
            for (Donor ep:s.getDonordirectory().getDonor()){
               if (s9.equals(ep.getUsername())){
                  flag=0;                
                JOptionPane.showMessageDialog(this,"Username already exists, please try again");
               }
            }
        } 
        else if(s1.equals("Receiver")){
            for (Receiver ep:s.getReceiverdirectory().getReceiver()){
               if (s9.equals(ep.getUsername())){
                  flag=0;                
                JOptionPane.showMessageDialog(this,"Username already exists, please try again");
               }
            }
            
        }
            String s10 = password.getText();
        if(s10.equals(""))
        {
           flag=0;
           JOptionPane.showMessageDialog(this,"Password field cannot be empty");
           return;                     
        } 
        if (s1.equals("Donor")){
            for (Donor ep1:s.getDonordirectory().getDonor()){
                if (s10.equals(ep1.getPassword())){
                  flag=0;                
                JOptionPane.showMessageDialog(this,"Password already exists, please try again");
               }
        }
        }
        else if(s1.equals("Receiver")){
            for (Receiver ep1:s.getReceiverdirectory().getReceiver()){
                if (s10.equals(ep1.getPassword())){
                  flag=0;                
                JOptionPane.showMessageDialog(this,"Password already exists, please try again");
               }              
                    
               }
        
        } 

        
       
        if(flag == 1)
        {
            if (s1.equals("Donor")){
                Donor pp = s.getDonordirectory().addNewD();
                pp.setUserType(s1);   
                pp.setName(s2);
                pp.setAge(s3);
                pp.setGender(s4);
                pp.setId(s5);   
                pp.setContact(s6);
                pp.setEmailId(s7);
                pp.setBloodGroup(s8);                  
                pp.setUsername(s9);
                pp.setPassword(s10);             
         
                JOptionPane.showMessageDialog(this,"Donor Profile created successfully");  
                populateTable();
         }
        name.setText("");
        age.setText("");
        gender.setSelectedItem("Select");
        id.setText("");
        contact.setText("");
        emailid.setText("");
        bloodgroup.setText("");                    
        usertype.setSelectedItem("Select");
        username.setText("");
        password.setText("");
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void ageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ageActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ageActionPerformed

    private void ageKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_ageKeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_ageKeyPressed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
              int row = tabledonor.getSelectedRow();
        DefaultTableModel model = (DefaultTableModel) tabledonor.getModel();
        Donor selectedep = (Donor)model.getValueAt(row, 0);
        
                name.setText(String.valueOf(selectedep.getName()));
                age.setText(String.valueOf(selectedep.getAge()));
                gender.setSelectedItem(String.valueOf(selectedep.getGender()));
                usertype.setSelectedItem(String.valueOf(selectedep.getUserType()));
                id.setText(String.valueOf(selectedep.getId()));
                emailid.setText(String.valueOf(selectedep.getEmailId()));
                bloodgroup.setText(String.valueOf(selectedep.getBloodGroup()));
                contact.setText(String.valueOf(selectedep.getContact()));
                username.setText(String.valueOf(selectedep.getUsername()));
                password.setText(String.valueOf(selectedep.getPassword()));
                
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // TODO add your handling code here:
            int row = tabledonor.getSelectedRow();
        if(row<0){
            JOptionPane.showMessageDialog(this,"Please select row to delete");
            return;

        }

        DefaultTableModel model = (DefaultTableModel) tabledonor.getModel();
        Donor selectedep = (Donor)model.getValueAt(row, 0);

        s.getDonordirectory().deleteD(selectedep);
        JOptionPane.showMessageDialog(this,"Donor Profile deleted");

        populateTable();
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        int row = tabledonor.getSelectedRow();
        DefaultTableModel model = (DefaultTableModel) tabledonor.getModel();
        Donor selectedep = (Donor)model.getValueAt(row, 0);
        s.getDonordirectory().deleteD(selectedep);
        
        int flag =1;
        String s1 = (String)usertype.getSelectedItem();
        if(s1.equals("select"))
        {
           flag=0;
           JOptionPane.showMessageDialog(this,"UserType field cannot be empty");
           return;                     
        } 
        String s2 = name.getText(); 
        if(s2.equals(""))
        {
           flag=0;
           JOptionPane.showMessageDialog(this,"Name field cannot be empty or contain numbers");
           return;                     
        }   
        char[] chars = s2.toCharArray();
        for(char c : chars)
        {
            if(Character.isDigit(c))
            {
               flag=0;
               JOptionPane.showMessageDialog(this,"Name field cannot be empty or contain numbers");
               return;   
            }
        }
        
        
        String ss3 = age.getText();             
        
        if(ss3.equals(""))
        {
            flag=0;
           JOptionPane.showMessageDialog(this,"Age field cannot be empty or contain alphabet"); 
           return;
        }
        char[] chars1 = ss3.toCharArray();
        for(char c : chars1)
        {
            if(Character.isAlphabetic(c))
            {
               flag=0;
               JOptionPane.showMessageDialog(this,"Age field cannot be empty or contain alphabet"); 
               return;   
            }
        }
        int s3 = Integer.parseInt(ss3);
          
        String s4 = (String)gender.getSelectedItem();
        if(s4.equals("select"))
        {
            flag=0;
           JOptionPane.showMessageDialog(this,"Gender field cannot be empty");  
           return;
        }
        String ss5 = id.getText();
        
        if(ss5.equals(""))
            {
            flag=0;
           JOptionPane.showMessageDialog(this,"Id field cannot be empty or contain alphabet"); 
           return;
            }
        char[] chars3 = ss5.toCharArray();
        for(char c : chars3)
        {
            if(Character.isAlphabetic(c))
            {
               flag=0;
               JOptionPane.showMessageDialog(this,"Id field cannot be empty or contain alphabet"); 
               return;   
            }
        }
        int s5 = Integer.parseInt(ss5);
        if(s1.equals("Donor")){
            for (Donor epp:s.getDonordirectory().getDonor()){
                if (s5 == (epp.getId())){
                   flag=0;                
                 JOptionPane.showMessageDialog(this,"ID already exists, please fill the details again");
                }
            }
        }
        else if (s1.equals("Receiver")){
                for (Receiver epp:s.getReceiverdirectory().getReceiver()){
                if (s5 == (epp.getId())){
                   flag=0;                
                 JOptionPane.showMessageDialog(this,"ID already exists, please fill the details again");
                }
                
                }
        }
        String ss6 =  contact.getText();
        
        if(ss6.equals(""))
        {
            flag=0;
           JOptionPane.showMessageDialog(this,"Cell phone number field cannot be empty or contain alphabet"); 
           return;
         }
        if(ss6.length()!=10)
        {
            flag=0;
            JOptionPane.showMessageDialog(this,"Cell phone number must be 10 digits");  
            return;
        }
        char[] chars5 = ss6.toCharArray();
        for(char c : chars5)
        {
            if(Character.isAlphabetic(c))
            {
               flag=0;
               JOptionPane.showMessageDialog(this,"Cell phone number field cannot be empty or contain alphabet"); 
               return;   
            }
        }
        long s6 = Long.parseLong(ss6);
        String s7 = emailid.getText();
        if(s7.equals(""))
        {
           flag=0;
           JOptionPane.showMessageDialog(this,"EmailId field cannot be empty");
           return;                     
        } 
        String s8 = bloodgroup.getText();
        if(s8.equals(""))
        {
           flag=0;
           JOptionPane.showMessageDialog(this,"BloodGroup field cannot be empty");
           return;                     
        } 
        
        String s9 = username.getText();
        if(s9.equals(""))
        {
           flag=0;
           JOptionPane.showMessageDialog(this,"Username field cannot be empty");
           return;                     
        } 
        if (s1.equals("Donor")){            
        
            for (Donor ep:s.getDonordirectory().getDonor()){
               if (s9.equals(ep.getUsername())){
                  flag=0;                
                JOptionPane.showMessageDialog(this,"Username already exists, please try again");
               }
            }
        } 
        else if(s1.equals("Receiver")){
            for (Receiver ep:s.getReceiverdirectory().getReceiver()){
               if (s9.equals(ep.getUsername())){
                  flag=0;                
                JOptionPane.showMessageDialog(this,"Username already exists, please try again");
               }
            }
            
        }
            String s10 = password.getText();
        if(s10.equals(""))
        {
           flag=0;
           JOptionPane.showMessageDialog(this,"Password field cannot be empty");
           return;                     
        } 
        if (s1.equals("Donor")){
            for (Donor ep1:s.getDonordirectory().getDonor()){
                if (s10.equals(ep1.getPassword())){
                  flag=0;                
                JOptionPane.showMessageDialog(this,"Password already exists, please try again");
               }
        }
        }
        else if(s1.equals("Receiver")){
            for (Receiver ep1:s.getReceiverdirectory().getReceiver()){
                if (s10.equals(ep1.getPassword())){
                  flag=0;                
                JOptionPane.showMessageDialog(this,"Password already exists, please try again");
               }              
                    
               }
        
        } 

        
       
        if(flag == 1)
        {
            if (s1.equals("Donor")){
                Donor pp = s.getDonordirectory().addNewD();
                pp.setUserType(s1);   
                pp.setName(s2);
                pp.setAge(s3);
                pp.setGender(s4);
                pp.setId(s5);   
                pp.setContact(s6);
                pp.setEmailId(s7);
                pp.setBloodGroup(s8);                  
                pp.setUsername(s9);
                pp.setPassword(s10);             
         
                JOptionPane.showMessageDialog(this,"Donor Profile updated successfully");  
                populateTable();
         }
        name.setText("");
        age.setText("");
        gender.setSelectedItem("Select");
        id.setText("");
        contact.setText("");
        emailid.setText("");
        bloodgroup.setText("");                    
        usertype.setSelectedItem("Select");
        username.setText("");
        password.setText("");
        }
    }//GEN-LAST:event_jButton2ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField age;
    private javax.swing.JTextField bloodgroup;
    private javax.swing.JTextField contact;
    private javax.swing.JTextField emailid;
    private javax.swing.JComboBox<String> gender;
    private javax.swing.JTextField id;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField name;
    private javax.swing.JTextField password;
    private javax.swing.JTable tabledonor;
    private javax.swing.JTextField username;
    private javax.swing.JComboBox<String> usertype;
    // End of variables declaration//GEN-END:variables

private void populateTable() {
          DefaultTableModel model = (DefaultTableModel) tabledonor.getModel();
          model.setRowCount(0);
        
        for (Donor ep:s.getDonordirectory().getDonor()){
            
            Object[] row = new Object[5];
            row[0] = ep;
            row[1] = ep.getBloodGroup();
            row[2] = ep.getAge();
            row[3] = ep.getContact();
            row[4] = ep.getEmailId();
            
            
            
            
            model.addRow(row);
}     
 
}
}
