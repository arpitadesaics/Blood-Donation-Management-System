/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package GovernmentManagementSystem;

import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import model.Fund;
import model.system;

/**
 *
 * @author arpid
 */
public class GMFund extends javax.swing.JPanel {

    /**
     * Creates new form GMFund
     */
    system s;
    public GMFund(system s) {
        initComponents();
        this.s = s;
        populateTable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tablefund = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        donorname = new javax.swing.JTextField();
        centre = new javax.swing.JTextField();
        create = new javax.swing.JButton();
        update = new javax.swing.JButton();
        view = new javax.swing.JButton();
        delete = new javax.swing.JButton();
        donationid = new javax.swing.JTextField();
        amount = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        time = new javax.swing.JTextField();
        date = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        donationtype = new javax.swing.JComboBox<>();
        jLabel5 = new javax.swing.JLabel();

        jPanel2.setPreferredSize(new java.awt.Dimension(1200, 800));
        jPanel2.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        tablefund.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "Donor Name", "Blood Center", "Amount", "Date", "Time", "Donation Type"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.Long.class, java.lang.String.class, java.lang.Object.class, java.lang.Object.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tablefund);

        jPanel2.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(35, 35, 716, 154));

        jLabel1.setFont(new java.awt.Font("Segoe UI", 3, 14)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Donor Name:");
        jPanel2.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 259, -1, -1));

        jLabel2.setFont(new java.awt.Font("Segoe UI", 3, 14)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("Blood Center");
        jPanel2.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(211, 294, -1, -1));

        jLabel3.setFont(new java.awt.Font("Segoe UI", 3, 14)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("Donation Type");
        jPanel2.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(203, 363, -1, -1));
        jPanel2.add(donorname, new org.netbeans.lib.awtextra.AbsoluteConstraints(313, 256, 80, -1));
        jPanel2.add(centre, new org.netbeans.lib.awtextra.AbsoluteConstraints(313, 291, 80, -1));

        create.setText("Create");
        create.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createActionPerformed(evt);
            }
        });
        jPanel2.add(create, new org.netbeans.lib.awtextra.AbsoluteConstraints(494, 221, -1, -1));

        update.setText("Update");
        update.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateActionPerformed(evt);
            }
        });
        jPanel2.add(update, new org.netbeans.lib.awtextra.AbsoluteConstraints(494, 256, -1, -1));

        view.setText("View");
        view.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewActionPerformed(evt);
            }
        });
        jPanel2.add(view, new org.netbeans.lib.awtextra.AbsoluteConstraints(494, 291, -1, -1));

        delete.setText("Delete");
        delete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteActionPerformed(evt);
            }
        });
        jPanel2.add(delete, new org.netbeans.lib.awtextra.AbsoluteConstraints(494, 326, -1, -1));
        jPanel2.add(donationid, new org.netbeans.lib.awtextra.AbsoluteConstraints(313, 221, 80, -1));
        jPanel2.add(amount, new org.netbeans.lib.awtextra.AbsoluteConstraints(313, 326, 80, -1));

        jLabel7.setFont(new java.awt.Font("Segoe UI", 3, 14)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(255, 255, 255));
        jLabel7.setText("Amount");
        jPanel2.add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(239, 329, -1, -1));

        jLabel8.setFont(new java.awt.Font("Segoe UI", 3, 14)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(255, 255, 255));
        jLabel8.setText("Date");
        jPanel2.add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(255, 397, -1, -1));

        jLabel9.setFont(new java.awt.Font("Segoe UI", 3, 14)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(255, 255, 255));
        jLabel9.setText("Time");
        jPanel2.add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(255, 431, -1, -1));
        jPanel2.add(time, new org.netbeans.lib.awtextra.AbsoluteConstraints(313, 428, 80, -1));
        jPanel2.add(date, new org.netbeans.lib.awtextra.AbsoluteConstraints(313, 394, 80, -1));

        jLabel4.setFont(new java.awt.Font("Segoe UI", 3, 14)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setText("Donation ID");
        jPanel2.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(216, 224, -1, -1));

        donationtype.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select", "Govt Funding", "Charity", " ", " " }));
        jPanel2.add(donationtype, new org.netbeans.lib.awtextra.AbsoluteConstraints(313, 360, 80, -1));

        jLabel5.setFont(new java.awt.Font("Segoe UI", 3, 14)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(255, 255, 255));
        jLabel5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/GovernmentManagementSystem/gov pages.jpg"))); // NOI18N
        jLabel5.setPreferredSize(new java.awt.Dimension(1200, 800));
        jPanel2.add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void createActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createActionPerformed
        // TODO add your handling code here:
        int flag = 1;
        String ss1 = donationid.getText();
        
        if(ss1.equals(""))
            {
            flag=0;
           JOptionPane.showMessageDialog(this,"Id field cannot be empty or contain alphabet"); 
           return;
            }
        char[] chars3 = ss1.toCharArray();
        for(char c : chars3)
        {
            if(Character.isAlphabetic(c))
            {
               flag=0;
               JOptionPane.showMessageDialog(this,"Id field cannot be empty or contain alphabet"); 
               return;   
            }
        }
        int s1 = Integer.parseInt(ss1);
        
            for (Fund epp:s.getFunddirectory().getFund()){
                if (s1 == (epp.getDonationid())){
                   flag=0;                
                 JOptionPane.showMessageDialog(this,"ID already exists, please fill the details again");
                }
            
        }
         
            String s2 = donorname.getText(); 
        if(s2.equals(""))
        {
           flag=0;
           JOptionPane.showMessageDialog(this,"Name field cannot be empty or contain numbers");
           return;                     
        }   
        char[] chars = s2.toCharArray();
        for(char c : chars)
        {
            if(Character.isDigit(c))
            {
               flag=0;
               JOptionPane.showMessageDialog(this,"Name field cannot be empty or contain numbers");
               return;   
            }
        }
        
        String s3 = centre.getText();
        if(s3.equals(""))
        {
           flag=0;
           JOptionPane.showMessageDialog(this,"BloodCentre field cannot be empty");
           return;                     
        } 
        
        String ss4 = amount.getText();             
        
        if(ss4.equals(""))
        {
            flag=0;
           JOptionPane.showMessageDialog(this,"Amount field cannot be empty or contain alphabet"); 
           return;
        }
        char[] chars1 = ss4.toCharArray();
        for(char c : chars1)
        {
            if(Character.isAlphabetic(c))
            {
               flag=0;
               JOptionPane.showMessageDialog(this,"Amount field cannot be empty or contain alphabet"); 
               return;   
            }
        }
        int s4 = Integer.parseInt(ss4);
        
         String s5 = (String)donationtype.getSelectedItem();
        if(s5.equals("Select"))
        {
            flag=0;
           JOptionPane.showMessageDialog(this,"Donation Type field cannot be empty");  
           return;
        }
        String s6 = date.getText();
        if(s6.equals(""))
        {
           flag=0;
           JOptionPane.showMessageDialog(this,"Please enter date");
           return;                     
        }
         if (s6.length()<10){
             flag=0;
            JOptionPane.showMessageDialog(this,"Please enter correct date in format mm/dd/yyyy" );
            return;
        }
        
        StringBuffer sBuffer = new StringBuffer(s6);
        String mm;
        String dd;
        String yr;

        mm = sBuffer.substring(0,2);
        dd = sBuffer.substring(3,5);
        yr = sBuffer.substring(6,10);

        
        if(mm.matches("0[1-9]|1[0-2]") && dd.matches("0[1-9]|[12][0-9]|3[01]") && yr.matches("(19|20)\\d\\d"))
        {
          
        }
        else
        {
            flag=0;
         JOptionPane.showMessageDialog(this, "Please enter correct date in format mm/dd/yyyy");
         return;
        }

        String s7 = time.getText();
        String regex = "([01]?[0-9]|2[0-3]):[0-5][0-9]";        
        Pattern p = Pattern.compile(regex); 
        if (s7 == "") {
            flag = 0;
            JOptionPane.showMessageDialog(this, "Please enter time");        }
 
        Matcher m = p.matcher(s7); 
        if (m.matches()){
            
        }
        else{
            flag = 0;
             JOptionPane.showMessageDialog(this, "Please enter time in 24 hr format");
        }
        
        if(flag == 1)
        {
            Fund hh = s.getFunddirectory().addNewFund();
            hh.setDonationid(s1);
            hh.setDonorname(s2);
            hh.setCentre(s3);
            hh.setAmount(s4);
            hh.setDonationtype(s5);
            hh.setDate(s6);
            hh.setTime(s7);
           

            JOptionPane.showMessageDialog(this,"Fund created successfully");

            populateTable();
        }
        donationid.setText("");
        donorname.setText("");
        centre.setText("");
        amount.setText("");
        date.setText("");
        time.setText("");        
        donationtype.setSelectedItem("Select");

    }//GEN-LAST:event_createActionPerformed

    private void viewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewActionPerformed
        // TODO add your handling code here:
            int row = tablefund.getSelectedRow();
        DefaultTableModel model = (DefaultTableModel) tablefund.getModel();
        Fund selectedep = (Fund)model.getValueAt(row, 0);
        
                donationid.setText(String.valueOf(selectedep.getDonationid()));
                donorname.setText(String.valueOf(selectedep.getDonorname()));
                centre.setText(String.valueOf(selectedep.getCentre()));
                amount.setText(String.valueOf(selectedep.getAmount()));
                donationtype.setSelectedItem(String.valueOf(selectedep.getDonationtype()));
                date.setText(String.valueOf(selectedep.getDate()));
                time.setText(String.valueOf(selectedep.getTime()));
                
                
    }//GEN-LAST:event_viewActionPerformed

    private void deleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteActionPerformed
        // TODO add your handling code here:
         int row = tablefund.getSelectedRow();
        if(row<0){
            JOptionPane.showMessageDialog(this,"Please select row to delete");
            return;
        }

        DefaultTableModel model = (DefaultTableModel) tablefund.getModel();
        Fund selectedep = (Fund)model.getValueAt(row, 0);
        s.getFunddirectory().deleteFund(selectedep);
        JOptionPane.showMessageDialog(this,"Fund deleted");

        populateTable();
    }//GEN-LAST:event_deleteActionPerformed

    private void updateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateActionPerformed
        // TODO add your handling code here:
        int row = tablefund.getSelectedRow();
        DefaultTableModel model = (DefaultTableModel) tablefund.getModel();
        Fund selectedep = (Fund)model.getValueAt(row, 0);
        s.getFunddirectory().deleteFund(selectedep);
        
        int flag = 1;
        String ss1 = donationid.getText();
        
        if(ss1.equals(""))
            {
            flag=0;
           JOptionPane.showMessageDialog(this,"Id field cannot be empty or contain alphabet"); 
           return;
            }
        char[] chars3 = ss1.toCharArray();
        for(char c : chars3)
        {
            if(Character.isAlphabetic(c))
            {
               flag=0;
               JOptionPane.showMessageDialog(this,"Id field cannot be empty or contain alphabet"); 
               return;   
            }
        }
        int s1 = Integer.parseInt(ss1);
        
            for (Fund epp:s.getFunddirectory().getFund()){
                if (s1 == (epp.getDonationid())){
                   flag=0;                
                 JOptionPane.showMessageDialog(this,"ID already exists, please fill the details again");
                }
            
        }
         
            String s2 = donorname.getText(); 
        if(s2.equals(""))
        {
           flag=0;
           JOptionPane.showMessageDialog(this,"Name field cannot be empty or contain numbers");
           return;                     
        }   
        char[] chars = s2.toCharArray();
        for(char c : chars)
        {
            if(Character.isDigit(c))
            {
               flag=0;
               JOptionPane.showMessageDialog(this,"Name field cannot be empty or contain numbers");
               return;   
            }
        }
        
        String s3 = centre.getText();
        if(s3.equals(""))
        {
           flag=0;
           JOptionPane.showMessageDialog(this,"BloodCentre field cannot be empty");
           return;                     
        } 
        
        String ss4 = amount.getText();             
        
        if(ss4.equals(""))
        {
            flag=0;
           JOptionPane.showMessageDialog(this,"Amount field cannot be empty or contain alphabet"); 
           return;
        }
        char[] chars1 = ss4.toCharArray();
        for(char c : chars1)
        {
            if(Character.isAlphabetic(c))
            {
               flag=0;
               JOptionPane.showMessageDialog(this,"Amount field cannot be empty or contain alphabet"); 
               return;   
            }
        }
        int s4 = Integer.parseInt(ss4);
        
         String s5 = (String)donationtype.getSelectedItem();
        if(s5.equals("Select"))
        {
            flag=0;
           JOptionPane.showMessageDialog(this,"Donation Type field cannot be empty");  
           return;
        }
        String s6 = date.getText();
        if(s6.equals(""))
        {
           flag=0;
           JOptionPane.showMessageDialog(this,"Please enter date");
           return;                     
        }
         if (s6.length()<10){
             flag=0;
            JOptionPane.showMessageDialog(this,"Please enter correct date in format mm/dd/yyyy" );
            return;
        }
        
        StringBuffer sBuffer = new StringBuffer(s6);
        String mm;
        String dd;
        String yr;

        mm = sBuffer.substring(0,2);
        dd = sBuffer.substring(3,5);
        yr = sBuffer.substring(6,10);

        
        if(mm.matches("0[1-9]|1[0-2]") && dd.matches("0[1-9]|[12][0-9]|3[01]") && yr.matches("(19|20)\\d\\d"))
        {
          
        }
        else
        {
            flag=0;
         JOptionPane.showMessageDialog(this, "Please enter correct date in format mm/dd/yyyy");
         return;
        }

        String s7 = time.getText();
        String regex = "([01]?[0-9]|2[0-3]):[0-5][0-9]";        
        Pattern p = Pattern.compile(regex); 
        if (s7 == "") {
            flag = 0;
            JOptionPane.showMessageDialog(this, "Please enter time");        }
 
        Matcher m = p.matcher(s7); 
        if (m.matches()){
            
        }
        else{
            flag = 0;
             JOptionPane.showMessageDialog(this, "Please enter time in 24 hr format");
        }
        
        
        if(flag == 1)
        {
            Fund hh = s.getFunddirectory().addNewFund();
            hh.setDonationid(s1);
            hh.setDonorname(s2);
            hh.setCentre(s3);
            hh.setAmount(s4);
            hh.setDonationtype(s5);
            hh.setDate(s6);
            hh.setTime(s7);
           

            JOptionPane.showMessageDialog(this,"Fund updated successfully");

            populateTable();
        }
        donationid.setText("");
        donorname.setText("");
        centre.setText("");
        amount.setText("");
        date.setText("");
        time.setText("");        
        donationtype.setSelectedItem("Select");
    }//GEN-LAST:event_updateActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField amount;
    private javax.swing.JTextField centre;
    private javax.swing.JButton create;
    private javax.swing.JTextField date;
    private javax.swing.JButton delete;
    private javax.swing.JTextField donationid;
    private javax.swing.JComboBox<String> donationtype;
    private javax.swing.JTextField donorname;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tablefund;
    private javax.swing.JTextField time;
    private javax.swing.JButton update;
    private javax.swing.JButton view;
    // End of variables declaration//GEN-END:variables
private void populateTable() {
    DefaultTableModel model = (DefaultTableModel) tablefund.getModel();
    model.setRowCount(0);
//    tablefaq.setShowGrid(true);
//    tablefaq.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
    for (Fund ep:s.getFunddirectory().getFund()){
            
            Object[] row = new Object[6];
            row[0] = ep;
            row[1] = ep.getCentre();
            row[2] = ep.getAmount();
            row[3] = ep.getDate();
            row[4] = ep.getTime();
            row[5] = ep.getDonationtype();
            
                
                      
            model.addRow(row);
}     
 
}

}
